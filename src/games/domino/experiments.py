import argparse, json, time
from domino import get_parser
from module import get_rule, DominoManager, get_player, hand_out, game_utils
from multiprocessing import Process, Queue, Lock


def experiment_heuristic_vs_mcts(args):
    parser = get_parser()

    player = ['mc', args.h, args.r]
    
    print(
        "Experiment #1 ----------------\n"
        "  Runs:\n"
        "    heuristic_vs_mcts:",
        end=" ", flush=True,
    )
    parsed_args = parser.parse_args(['play', '-p0', 'heuristic', '-p1', *player, "-v", '-rep', args.rep])
    x = parsed_args.command(parsed_args)

    print("    mcts_vs_heuristic:", end=" ", flush=True)
    parsed_args = parser.parse_args(['play', '-p1', 'heuristic', '-p0', *player, "-v", '-rep', args.rep])
    y = parsed_args.command(parsed_args)

    player_score = x[1] + y[0]
    heuristic_score = x[0] + y[1]
    print(
        "  Scores:\n"
        f"    Heuristic: {heuristic_score}\n"
        f"    MCTS: {player_score}\n"
        "------------------------------"
    )
    return "MCTS", player_score


def experiment_heuristic_vs_a0(args):
    parser = get_parser()

    player = ['a0', args.h, args.r, args.nn, '0']
    
    print(
        "Experiment #2 ----------------\n"
        "  Runs:\n"
        "    heuristic_vs_alphazero:",
        end=" ", flush=True,
    )
    parsed_args = parser.parse_args(['play', '-p0', 'heuristic', '-p1', *player, "-v", '-rep', args.rep])
    x = parsed_args.command(parsed_args)

    print("    alphazero_vs_heuristic:", end=" ", flush=True)
    parsed_args = parser.parse_args(['play', '-p1', 'heuristic', '-p0', *player, "-v", '-rep', args.rep])
    y = parsed_args.command(parsed_args)

    player_score = x[1] + y[0]
    heuristic_score = x[0] + y[1]
    print(
        "  Scores:\n"
        f"    Heuristic: {heuristic_score}\n"
        f"    Alpha Zero: {player_score}\n"
        "------------------------------"
    )
    return "Alpha Zero", player_score


def experiment_heuristic_vs_a0coop(args):
    parser = get_parser()

    player = ['a0', args.h, args.r, args.nn, "5"]
    
    print(
        "Experiment #3 ----------------\n"
        "  Runs:\n"
        "    heuristic_vs_alphazero_coop:",
        end=" ", flush=True,
    )
    parsed_args = parser.parse_args(['play', '-p0', 'heuristic', '-p1', *player, "-v", '-rep', args.rep, "-r", 'firsttogain100'])
    x = parsed_args.command(parsed_args)

    print("    alphazero_coop_vs_heuristic:", end=" ", flush=True)
    parsed_args = parser.parse_args(['play', '-p1', 'heuristic', '-p0', *player, "-v", '-rep', args.rep, "-r", 'firsttogain100'])
    y = parsed_args.command(parsed_args)

    player_score = x[1] + y[0]
    heuristic_score = x[0] + y[1]
    print(
        "  Scores:\n"
        f"    Heuristic: {heuristic_score}\n"
        f"    Alpha Zero Coop: {player_score}\n"
        "------------------------------"
    )
    return "Alpha Zero Coop", player_score


def test_handouts_vs_rollout(args):
    parser = get_parser()

    print(
        "Test #1 ----------------------\n"
        "  Running handouts_vs_rollouts:"
    )
    rollouts = ["10", "20", "30", "50", "100"]
    handouts = ["1", "10", "20", "50", "100"]

    players = []
    for h in handouts:
        for r in rollouts:
            if int(h) * int(r) < 2000:
                players.append((h, r))

    skip_data = {
        (('1', '10'), ('1', '30')): {-1: 3, 0: 55, 1: 42},
        (('1', '10'), ('1', '50')): {-1: 1, 0: 61, 1: 38},
        (('1', '10'), ('1', '100')): {-1: 1, 0: 58, 1: 41},
        (('1', '10'), ('10', '10')): {-1: 2, 0: 52, 1: 46},
        (('1', '10'), ('10', '30')): {-1: 2, 0: 44, 1: 54},
        (('1', '10'), ('10', '50')): {-1: 2, 0: 57, 1: 41},
        (('1', '10'), ('10', '100')): {-1: 0, 0: 46, 1: 54},
        (('1', '10'), ('50', '10')): {-1: 2, 0: 48, 1: 50},
        (('1', '10'), ('50', '30')): {-1: 1, 0: 48, 1: 51},
        (('1', '10'), ('50', '50')): {-1: 1, 0: 52, 1: 47},
        (('1', '10'), ('100', '10')): {-1: 2, 0: 45, 1: 53},
        (('1', '10'), ('50', '100')): {-1: 1, 0: 55, 1: 44},
        (('1', '10'), ('100', '30')): {-1: 2, 0: 47, 1: 51},
        (('1', '10'), ('100', '50')): {-1: 1, 0: 53, 1: 46},
    }

    score = [0] * len(players)
    for i, p0 in enumerate(players):
        for j, p1 in enumerate(players):
            if j == i: continue
            
            print(f"    {p0}_vs_{p1}: ", end="", flush=True)
            X = None
            try: 
                X = skip_data[p0, p1]
                print(X)
            except:
                parsed_args = parser.parse_args(['play', '-p0', 'mc', *p0, '-p1', "mc", *p1, "-v", '-rep', args.rep])
                X = parsed_args.command(parsed_args)
            score[i] += X[0]
            score[j] += X[1]

    tup = list(zip(players, score))
    tup.sort(key=lambda x: x[1], reverse=True)
    print("  Results (handout -> wins):")
    for x, y in tup:
        print(f"    {x} -> {y}")
    print("------------------------------")


def run_some(args, p0s, p1s, skip, q, start):
    parser = get_parser()

    for i, p0 in enumerate(p0s):
        for j, p1 in enumerate(p1s):
            if i + start == j: continue
            
            X = None
            try: 
                X = skip[p0, p1]
            except:
                parsed_args = parser.parse_args(['play', '-p0', 'mc', *p0, '-p1', "mc", *p1, '-rep', args.rep])
                X = parsed_args.command(parsed_args)
            print(f"    {p0}_vs_{p1}: {X}")
            q.put((i + start, X[0]))
            q.put((j, X[1]))
            

def test_handouts_vs_rollout_v2(args):
    print(
        "Test #1 v2 -------------------\n"
        "  Running handouts_vs_rollouts:"
    )
    rollouts = ["10", "20", "30", "50", "100"]
    handouts = ["1", "10", "20", "50", "100"]

    players = []
    for h in handouts:
        for r in rollouts:
            if int(h) * int(r) < 2000:
                players.append((h, r))

    skip_data = {
        (('1', '10'), ('1', '20')  ): {-1: 0, 0: 53, 1: 47},
        (('1', '10'), ('1', '30')  ): {-1: 3, 0: 55, 1: 42},
        (('1', '10'), ('1', '50')  ): {-1: 1, 0: 61, 1: 38},
        (('1', '10'), ('1', '100') ): {-1: 1, 0: 58, 1: 41},
        (('1', '10'), ('10', '10') ): {-1: 2, 0: 52, 1: 46},
        (('1', '10'), ('10', '20') ): {-1: 0, 0: 56, 1: 44},
        (('1', '10'), ('10', '30') ): {-1: 2, 0: 44, 1: 54},
        (('1', '10'), ('10', '50') ): {-1: 2, 0: 57, 1: 41},
        (('1', '10'), ('10', '100')): {-1: 0, 0: 46, 1: 54},
        (('1', '10'), ('20', '10') ): {-1: 1, 0: 51, 1: 48},
        (('1', '10'), ('20', '20') ): {-1: 1, 0: 51, 1: 48},
        (('1', '10'), ('20', '30') ): {-1: 1, 0: 50, 1: 49},
        (('1', '10'), ('20', '50') ): {-1: 0, 0: 57, 1: 43},
        (('1', '10'), ('50', '10') ): {-1: 2, 0: 48, 1: 50},
        (('1', '10'), ('50', '20') ): {-1: 3, 0: 57, 1: 40},
        (('1', '10'), ('50', '30') ): {-1: 1, 0: 48, 1: 51},
        (('1', '10'), ('100', '10')): {-1: 2, 0: 45, 1: 53},
        (('1', '20'), ('1', '10')  ): {-1: 4, 0: 59, 1: 37},
        (('1', '20'), ('1', '30')  ): {-1: 1, 0: 56, 1: 43},
        (('1', '20'), ('1', '50')  ): {-1: 1, 0: 59, 1: 40},
        (('1', '20'), ('1', '100') ): {-1: 3, 0: 51, 1: 46},
        (('1', '20'), ('10', '10') ): {-1: 0, 0: 56, 1: 44},
        (('1', '20'), ('10', '20') ): {-1: 1, 0: 52, 1: 47},
        (('1', '20'), ('10', '30') ): {-1: 0, 0: 55, 1: 45},
        (('1', '20'), ('10', '50') ): {-1: 0, 0: 56, 1: 44},
        (('1', '20'), ('10', '100')): {-1: 2, 0: 65, 1: 33},
        (('1', '20'), ('20', '10') ): {-1: 1, 0: 51, 1: 48},
        (('1', '20'), ('20', '20') ): {-1: 1, 0: 45, 1: 54},
        (('1', '20'), ('20', '30') ): {-1: 1, 0: 57, 1: 42},
        (('1', '20'), ('20', '50') ): {-1: 1, 0: 57, 1: 42},
        (('1', '20'), ('50', '10') ): {-1: 0, 0: 46, 1: 54},
        (('1', '20'), ('50', '20') ): {-1: 3, 0: 53, 1: 44},
        (('1', '20'), ('50', '30') ): {-1: 4, 0: 53, 1: 43},
        (('1', '20'), ('100', '10')): {-1: 0, 0: 55, 1: 45},
        (('1', '30'), ('1', '10')  ): {-1: 2, 0: 51, 1: 47},
        (('1', '30'), ('1', '20')  ): {-1: 2, 0: 49, 1: 49},
        (('1', '30'), ('1', '50')  ): {-1: 1, 0: 49, 1: 50},
        (('1', '30'), ('1', '100') ): {-1: 3, 0: 58, 1: 39},
        (('1', '30'), ('10', '10') ): {-1: 2, 0: 57, 1: 41},
        (('1', '30'), ('10', '20') ): {-1: 1, 0: 61, 1: 38},
        (('1', '30'), ('10', '30') ): {-1: 1, 0: 52, 1: 47},
        (('1', '30'), ('10', '50') ): {-1: 0, 0: 59, 1: 41},
        (('1', '30'), ('10', '100')): {-1: 4, 0: 57, 1: 39},
        (('1', '30'), ('20', '10') ): {-1: 1, 0: 54, 1: 45},
        (('1', '30'), ('20', '20') ): {-1: 2, 0: 57, 1: 41},
        (('1', '30'), ('20', '30') ): {-1: 8, 0: 47, 1: 45},
        (('1', '30'), ('20', '50') ): {-1: 2, 0: 43, 1: 55},
        (('1', '30'), ('50', '10') ): {-1: 1, 0: 53, 1: 46},
        (('1', '30'), ('50', '20') ): {-1: 0, 0: 51, 1: 49},
        (('1', '30'), ('50', '30') ): {-1: 2, 0: 55, 1: 43},
        (('1', '30'), ('100', '10')): {-1: 1, 0: 49, 1: 50},
        (('1', '50'), ('1', '10')  ): {-1: 0, 0: 61, 1: 39},
        (('1', '50'), ('1', '20')  ): {-1: 1, 0: 54, 1: 45},
        (('1', '50'), ('1', '30')  ): {-1: 1, 0: 48, 1: 51},
        (('1', '50'), ('1', '100') ): {-1: 0, 0: 56, 1: 44},
    }

    score = [0] * len(players)

    q = Queue()
    pro1 = Process(target=run_some, args=(args, players[  : 9], players, skip_data, q, 0))
    pro2 = Process(target=run_some, args=(args, players[9 :14], players, skip_data, q, 9))
    pro3 = Process(target=run_some, args=(args, players[14:19], players, skip_data, q, 14))
    pro4 = Process(target=run_some, args=(args, players[19:  ], players, skip_data, q, 19))

    pro1.start()
    pro2.start()
    pro3.start()
    pro4.start()
    pro1.join()
    pro2.join()
    pro3.join()
    pro4.join()

    while not q.empty():
        idx, v = q.get()
        score[idx] += v

    tup = list(zip(players, score))
    tup.sort(key=lambda x: x[1], reverse=True)
    print("  Results (handout -> wins):")
    for x, y in tup:
        print(f"    {x} -> {y}")
    print("------------------------------")


def run_single(args, skip, input, output, lock):
    parser = get_parser()
    print("starting proccess")

    while True:
        lock.acquire()
        if input.empty():
            lock.release()
            return
        (p0, p1, i, j) = input.get()
        lock.release()
        try: 
            X = skip[p0, p1]
        except:
            parsed_args = parser.parse_args(['play', '-p0', 'mc', *p0, '-p1', "mc", *p1, '-rep', args.rep])
            X = parsed_args.command(parsed_args)
        print(f"    {p0}_vs_{p1}: {X}")
        output.put((i, X[0]))
        output.put((j, X[1]))


def test_handouts_vs_rollout_v3(args):
    print(
        "Test #1 v3 -------------------\n"
        "  Running handouts_vs_rollouts:"
    )
    rollouts = ["10", "20", "30", "50", "100"]
    handouts = ["1", "10", "20", "50", "100"]

    players = []
    for h in handouts:
        for r in rollouts:
            if int(h) * int(r) < 2000:
                players.append((h, r))

    skip_data = {
        (('1', '10'), ('1', '20')): {-1: 0, 0: 53, 1: 47},
        (('1', '10'), ('1', '30')): {-1: 3, 0: 55, 1: 42},
        (('1', '10'), ('1', '50')): {-1: 1, 0: 61, 1: 38},
        (('1', '10'), ('1', '100')): {-1: 1, 0: 58, 1: 41},
        (('1', '10'), ('10', '10')): {-1: 2, 0: 52, 1: 46},
        (('1', '10'), ('10', '20')): {-1: 0, 0: 56, 1: 44},
        (('1', '10'), ('10', '30')): {-1: 2, 0: 44, 1: 54},
        (('1', '10'), ('10', '50')): {-1: 2, 0: 57, 1: 41},
        (('1', '10'), ('10', '100')): {-1: 0, 0: 46, 1: 54},
        (('1', '10'), ('20', '10')): {-1: 1, 0: 51, 1: 48},
        (('1', '10'), ('20', '20')): {-1: 1, 0: 51, 1: 48},
        (('1', '10'), ('20', '30')): {-1: 1, 0: 50, 1: 49},
        (('1', '10'), ('20', '50')): {-1: 0, 0: 57, 1: 43},
        (('1', '10'), ('50', '10')): {-1: 2, 0: 48, 1: 50},
        (('1', '10'), ('50', '20')): {-1: 3, 0: 57, 1: 40},
        (('1', '10'), ('50', '30')): {-1: 1, 0: 48, 1: 51},
        (('1', '10'), ('100', '10')): {-1: 2, 0: 45, 1: 53},
        (('1', '20'), ('1', '10')): {-1: 4, 0: 59, 1: 37},
        (('1', '20'), ('1', '30')): {-1: 1, 0: 56, 1: 43},
        (('1', '20'), ('1', '50')): {-1: 1, 0: 59, 1: 40},
        (('1', '20'), ('1', '100')): {-1: 3, 0: 51, 1: 46},
        (('1', '20'), ('10', '10')): {-1: 0, 0: 56, 1: 44},
        (('1', '20'), ('10', '20')): {-1: 1, 0: 52, 1: 47},
        (('1', '20'), ('10', '30')): {-1: 0, 0: 55, 1: 45},
        (('1', '20'), ('10', '50')): {-1: 0, 0: 56, 1: 44},
        (('1', '20'), ('10', '100')): {-1: 2, 0: 65, 1: 33},
        (('1', '20'), ('20', '10')): {-1: 1, 0: 51, 1: 48},
        (('1', '20'), ('20', '20')): {-1: 1, 0: 45, 1: 54},
        (('1', '20'), ('20', '30')): {-1: 1, 0: 57, 1: 42},
        (('1', '20'), ('20', '50')): {-1: 1, 0: 57, 1: 42},
        (('1', '20'), ('50', '10')): {-1: 0, 0: 46, 1: 54},
        (('1', '20'), ('50', '20')): {-1: 3, 0: 53, 1: 44},
        (('1', '20'), ('50', '30')): {-1: 4, 0: 53, 1: 43},
        (('1', '20'), ('100', '10')): {-1: 0, 0: 55, 1: 45},
        (('1', '30'), ('1', '10')): {-1: 2, 0: 51, 1: 47},
        (('1', '30'), ('1', '20')): {-1: 2, 0: 49, 1: 49},
        (('1', '30'), ('1', '50')): {-1: 1, 0: 49, 1: 50},
        (('1', '30'), ('1', '100')): {-1: 3, 0: 58, 1: 39},
        (('1', '30'), ('10', '10')): {-1: 2, 0: 57, 1: 41},
        (('1', '30'), ('10', '20')): {-1: 1, 0: 61, 1: 38},
        (('1', '30'), ('10', '30')): {-1: 1, 0: 52, 1: 47},
        (('1', '30'), ('10', '50')): {-1: 0, 0: 59, 1: 41},
        (('1', '30'), ('10', '100')): {-1: 4, 0: 57, 1: 39},
        (('1', '30'), ('20', '10')): {-1: 1, 0: 54, 1: 45},
        (('1', '30'), ('20', '20')): {-1: 2, 0: 57, 1: 41},
        (('1', '30'), ('20', '30')): {-1: 8, 0: 47, 1: 45},
        (('1', '30'), ('20', '50')): {-1: 2, 0: 43, 1: 55},
        (('1', '30'), ('50', '10')): {-1: 1, 0: 53, 1: 46},
        (('1', '30'), ('50', '20')): {-1: 0, 0: 51, 1: 49},
        (('1', '30'), ('50', '30')): {-1: 2, 0: 55, 1: 43},
        (('1', '30'), ('100', '10')): {-1: 1, 0: 49, 1: 50},
        (('1', '50'), ('1', '10')): {-1: 0, 0: 61, 1: 39},
        (('1', '50'), ('1', '20')): {-1: 1, 0: 54, 1: 45},
        (('1', '50'), ('1', '30')): {-1: 1, 0: 48, 1: 51},
        (('1', '50'), ('1', '100')): {-1: 0, 0: 56, 1: 44},
        (('1', '50'), ('10', '10')): {-1: 2, 0: 41, 1: 57},
        (('1', '50'), ('10', '20')): {-1: 1, 0: 49, 1: 50},
        (('50', '10'), ('1', '10')): {-1: 0, 0: 68, 1: 32},
        (('1', '50'), ('10', '30')): {-1: 2, 0: 63, 1: 35},
        (('10', '100'), ('1', '10')): {-1: 1, 0: 57, 1: 42},
        (('50', '10'), ('1', '20')): {-1: 1, 0: 63, 1: 36},
        (('1', '50'), ('10', '50')): {-1: 1, 0: 62, 1: 37},
        (('50', '10'), ('1', '30')): {-1: 1, 0: 55, 1: 44},
        (('10', '100'), ('1', '20')): {-1: 2, 0: 60, 1: 38},
        (('1', '50'), ('10', '100')): {-1: 2, 0: 43, 1: 55},
        (('50', '10'), ('1', '50')): {-1: 2, 0: 60, 1: 38},
        (('1', '50'), ('20', '10')): {-1: 0, 0: 51, 1: 49},
        (('1', '50'), ('20', '20')): {-1: 1, 0: 53, 1: 46},
        (('50', '10'), ('1', '100')): {-1: 0, 0: 61, 1: 39},
        (('10', '100'), ('1', '30')): {-1: 0, 0: 51, 1: 49},
        (('1', '50'), ('20', '30')): {-1: 0, 0: 52, 1: 48},
        (('50', '10'), ('10', '10')): {-1: 1, 0: 57, 1: 42},
        (('10', '100'), ('1', '50')): {-1: 3, 0: 56, 1: 41},
        (('50', '10'), ('10', '20')): {-1: 1, 0: 60, 1: 39},
        (('1', '50'), ('20', '50')): {-1: 0, 0: 43, 1: 57},
        (('10', '100'), ('1', '100')): {-1: 3, 0: 59, 1: 38},
        (('1', '50'), ('50', '10')): {-1: 1, 0: 54, 1: 45},
        (('50', '10'), ('10', '30')): {-1: 0, 0: 54, 1: 46},
        (('1', '50'), ('50', '20')): {-1: 1, 0: 42, 1: 57},
        (('10', '100'), ('10', '10')): {-1: 2, 0: 52, 1: 46},
        (('50', '10'), ('10', '50')): {-1: 1, 0: 55, 1: 44},
        (('10', '100'), ('10', '20')): {-1: 1, 0: 61, 1: 38},
        (('1', '50'), ('50', '30')): {-1: 0, 0: 49, 1: 51},
        (('50', '10'), ('10', '100')): {-1: 2, 0: 59, 1: 39},
        (('50', '10'), ('20', '10')): {-1: 0, 0: 59, 1: 41},
        (('10', '100'), ('10', '30')): {-1: 0, 0: 65, 1: 35},
        (('1', '50'), ('100', '10')): {-1: 1, 0: 50, 1: 49},
        (('1', '100'), ('1', '10')): {-1: 1, 0: 56, 1: 43},
        (('1', '100'), ('1', '20')): {-1: 3, 0: 63, 1: 34},
        (('1', '100'), ('1', '30')): {-1: 1, 0: 64, 1: 35},
        (('1', '100'), ('1', '50')): {-1: 2, 0: 61, 1: 37},
        (('1', '100'), ('10', '10')): {-1: 1, 0: 55, 1: 44},
        (('50', '10'), ('20', '20')): {-1: 2, 0: 53, 1: 45},
        (('1', '100'), ('10', '20')): {-1: 0, 0: 57, 1: 43},
        (('10', '100'), ('10', '50')): {-1: 1, 0: 46, 1: 53},
        (('1', '100'), ('10', '30')): {-1: 1, 0: 56, 1: 43},
        (('50', '10'), ('20', '30')): {-1: 1, 0: 54, 1: 45},
        (('1', '100'), ('10', '50')): {-1: 1, 0: 49, 1: 50},
        (('10', '100'), ('20', '10')): {-1: 1, 0: 52, 1: 47},
        (('1', '100'), ('10', '100')): {-1: 1, 0: 53, 1: 46},
        (('1', '100'), ('20', '10')): {-1: 2, 0: 52, 1: 46},
        (('50', '10'), ('20', '50')): {-1: 1, 0: 56, 1: 43},
        (('1', '100'), ('20', '20')): {-1: 3, 0: 56, 1: 41},
        (('10', '100'), ('20', '20')): {-1: 0, 0: 64, 1: 36},
        (('1', '100'), ('20', '30')): {-1: 1, 0: 59, 1: 40},
        (('50', '10'), ('50', '20')): {-1: 1, 0: 59, 1: 40},
        (('10', '100'), ('20', '30')): {-1: 0, 0: 52, 1: 48},
        (('1', '100'), ('20', '50')): {-1: 6, 0: 46, 1: 48},
        (('1', '100'), ('50', '10')): {-1: 3, 0: 52, 1: 45},
        (('50', '10'), ('50', '30')): {-1: 1, 0: 63, 1: 36},
        (('1', '100'), ('50', '20')): {-1: 0, 0: 46, 1: 54},
        (('10', '100'), ('20', '50')): {-1: 2, 0: 59, 1: 39},
        (('50', '10'), ('100', '10')): {-1: 2, 0: 57, 1: 41},
        (('1', '100'), ('50', '30')): {-1: 1, 0: 44, 1: 55},
        (('10', '100'), ('50', '10')): {-1: 0, 0: 56, 1: 44},
        (('50', '20'), ('1', '10')): {-1: 0, 0: 65, 1: 35},
        (('1', '100'), ('100', '10')): {-1: 0, 0: 41, 1: 59},
        (('10', '10'), ('1', '10')): {-1: 1, 0: 62, 1: 37},
        (('10', '10'), ('1', '20')): {-1: 1, 0: 60, 1: 39},
        (('10', '10'), ('1', '30')): {-1: 3, 0: 55, 1: 42},
        (('10', '10'), ('1', '50')): {-1: 0, 0: 60, 1: 40},
        (('10', '10'), ('1', '100')): {-1: 0, 0: 54, 1: 46},
        (('50', '20'), ('1', '20')): {-1: 0, 0: 74, 1: 26},
        (('10', '100'), ('50', '20')): {-1: 2, 0: 49, 1: 49},
        (('10', '10'), ('10', '20')): {-1: 1, 0: 51, 1: 48},
        (('10', '10'), ('10', '30')): {-1: 1, 0: 54, 1: 45},
        (('50', '20'), ('1', '30')): {-1: 1, 0: 63, 1: 36},
        (('10', '10'), ('10', '50')): {-1: 0, 0: 58, 1: 42},
        (('50', '20'), ('1', '50')): {-1: 0, 0: 60, 1: 40},
        (('10', '10'), ('10', '100')): {-1: 1, 0: 64, 1: 35},
        (('10', '10'), ('20', '10')): {-1: 0, 0: 63, 1: 37},
        (('10', '100'), ('50', '30')): {-1: 1, 0: 53, 1: 46},
        (('10', '10'), ('20', '20')): {-1: 2, 0: 49, 1: 49},
        (('50', '20'), ('1', '100')): {-1: 1, 0: 59, 1: 40},
        (('10', '10'), ('20', '30')): {-1: 1, 0: 50, 1: 49},
        (('50', '20'), ('10', '10')): {-1: 2, 0: 56, 1: 42},
        (('10', '100'), ('100', '10')): {-1: 0, 0: 50, 1: 50},
        (('20', '10'), ('1', '10')): {-1: 3, 0: 59, 1: 38},
        (('10', '10'), ('20', '50')): {-1: 2, 0: 59, 1: 39},
        (('20', '10'), ('1', '20')): {-1: 2, 0: 70, 1: 28},
        (('20', '10'), ('1', '30')): {-1: 1, 0: 57, 1: 42},
        (('10', '10'), ('50', '10')): {-1: 2, 0: 52, 1: 46},
        (('20', '10'), ('1', '50')): {-1: 2, 0: 63, 1: 35},
        (('50', '20'), ('10', '20')): {-1: 0, 0: 63, 1: 37},
        (('20', '10'), ('1', '100')): {-1: 1, 0: 62, 1: 37},
        (('20', '10'), ('10', '10')): {-1: 1, 0: 59, 1: 40},
        (('10', '10'), ('50', '20')): {-1: 2, 0: 54, 1: 44},
        (('20', '10'), ('10', '20')): {-1: 0, 0: 58, 1: 42},
        (('50', '20'), ('10', '30')): {-1: 2, 0: 51, 1: 47},
        (('20', '10'), ('10', '30')): {-1: 3, 0: 58, 1: 39},
        (('20', '10'), ('10', '50')): {-1: 1, 0: 52, 1: 47},
        (('10', '10'), ('50', '30')): {-1: 1, 0: 53, 1: 46},
        (('50', '20'), ('10', '50')): {-1: 2, 0: 62, 1: 36},
        (('20', '10'), ('10', '100')): {-1: 2, 0: 57, 1: 41},
        (('10', '10'), ('100', '10')): {-1: 0, 0: 51, 1: 49},
        (('10', '20'), ('1', '10')): {-1: 0, 0: 61, 1: 39},
        (('20', '10'), ('20', '20')): {-1: 3, 0: 50, 1: 47},
        (('10', '20'), ('1', '20')): {-1: 3, 0: 64, 1: 33},
        (('10', '20'), ('1', '30')): {-1: 0, 0: 57, 1: 43},
        (('10', '20'), ('1', '50')): {-1: 1, 0: 63, 1: 36},
        (('20', '10'), ('20', '30')): {-1: 2, 0: 60, 1: 38},
        (('10', '20'), ('1', '100')): {-1: 1, 0: 57, 1: 42},
        (('50', '20'), ('10', '100')): {-1: 2, 0: 68, 1: 30},
        (('10', '20'), ('10', '10')): {-1: 0, 0: 63, 1: 37},
        (('10', '20'), ('10', '30')): {-1: 2, 0: 45, 1: 53},
        (('20', '10'), ('20', '50')): {-1: 1, 0: 62, 1: 37},
        (('50', '20'), ('20', '10')): {-1: 2, 0: 55, 1: 43},
        (('10', '20'), ('10', '50')): {-1: 1, 0: 55, 1: 44},
        (('20', '10'), ('50', '10')): {-1: 2, 0: 61, 1: 37},
        (('10', '20'), ('10', '100')): {-1: 0, 0: 57, 1: 43},
        (('50', '20'), ('20', '20')): {-1: 0, 0: 60, 1: 40},
        (('20', '10'), ('50', '20')): {-1: 1, 0: 63, 1: 36},
        (('10', '20'), ('20', '10')): {-1: 1, 0: 63, 1: 36},
        (('10', '20'), ('20', '20')): {-1: 0, 0: 53, 1: 47},
        (('10', '20'), ('20', '30')): {-1: 0, 0: 61, 1: 39},
        (('50', '20'), ('20', '30')): {-1: 2, 0: 60, 1: 38},
        (('20', '10'), ('50', '30')): {-1: 0, 0: 52, 1: 48},
    }

    score = [0] * len(players)

    l = Lock()
    input = Queue()

    for i, p0 in enumerate(players):
        for j, p1 in enumerate(players):
            if i == j: continue
            input.put((p0, p1, i, j))

    output = Queue()
    processes = []
    for _ in range(args.proc):
        processes.append(Process(target=run_single, args=(args, skip_data, input, output, l)))
        processes[-1].start()

    for p in processes:
        p.join()

    while not output.empty():
        idx, v = output.get()
        score[idx] += v

    tup = list(zip(players, score))
    tup.sort(key=lambda x: x[1], reverse=True)
    print("  Results (handout -> wins):")
    for x, y in tup:
        print(f"    {x} -> {y}")
    print("------------------------------")


def test_colab(args):
    heuristic = get_player("heuristic")
    A0 = get_player("a0")

    data = []
    print("sefolmo")
    now = time.time()
    for _ in range(int(args.rep)):
        manager = DominoManager()
        players = [heuristic('0'), A0('1', args.h, args.r, args.nn, 5), heuristic('2'), A0('3', args.h, args.r, args.nn, 5)]
        result = manager.run(players, hand_out, 9, 10)
        data.append(('h_vs_a0', result, *[game_utils.calc_colab(manager.domino, i) for i in range(4)]))
    print("round tu fait")
    print(f"duration: ${time.time() - now}")
    for _ in range(int(args.rep)):
        manager = DominoManager()
        players = [A0('0', args.h, args.r, args.nn, 5), heuristic('1'), A0('2', args.h, args.r, args.nn, 5), heuristic('3')]
        result = manager.run(players, hand_out, 9, 10)
        data.append(('a0_vs_h', result, *[game_utils.calc_colab(manager.domino, i) for i in range(4)])) 
    print(data)

    with open('last_exp.json', 'w') as fd:
        json.dump(data, fd, indent=4)



def main(args):
    # Run tests
    for test in args.tests:
        test(args)

    # Run experiments
    scores = []
    for exp in args.experiments:
        scores.append(exp(args))
    print(
        "Final scores -----------------\n ",
        "\n  ".join(f'{label}: {score}' for label, score in scores),
        "\n------------------------------",
    )


if __name__ == "__main__":
    parser = argparse.ArgumentParser("DomAIno-Experiments")

    parser.add_argument(
        '-e1', '--exp1', dest="experiments", 
        action='append_const', const=experiment_heuristic_vs_mcts, 
        help="Heuristic vs MCTS experiment",
    )
    parser.add_argument(
        '-e2', '--exp2', dest="experiments", 
        action='append_const', const=experiment_heuristic_vs_a0,
        help="Heuristic vs Alpha Zero experiment",
    )
    parser.add_argument(
        '-e3', '--exp3', dest="experiments", 
        action='append_const', const=experiment_heuristic_vs_a0coop,
        help="Heuristic vs Alpha Zero with coop experiment",
    )
    parser.add_argument(
        '-t1', '--test1', dest="tests", 
        action='append_const', const=test_handouts_vs_rollout,
        help="Handouts vs Rollouts test",
    )
    parser.add_argument(
        '-t2', '--test2', dest="tests", 
        action='append_const', const=test_handouts_vs_rollout_v2,
        help="Handouts vs Rollouts test with paralelization",
    )
    parser.add_argument(
        '-t3', '--test3', dest="tests", 
        action='append_const', const=test_handouts_vs_rollout_v3,
        help="Handouts vs Rollouts test with better paralelization",
    )
    parser.add_argument(
        '-t4', '--test4', dest="tests", 
        action='append_const', const=test_colab,
        help="Colab calculation",
    )
    parser.add_argument(
        '-nn', '--network', dest="nn", 
        default='module/training/checkpoints/experimet_player.ckpt', 
        type=str, help="Neural Network path",
    )
    parser.add_argument(
        '-H', '--handouts', dest="h", 
        default='10', type=str, help="Number of handouts",
    )
    parser.add_argument(
        '-r', '--rollouts', dest="r", 
        default='50', type=str, help="Number of rollouts",
    )
    parser.add_argument(
        '-rep', '--repetitions', dest="rep", 
        default='50', type=str, help="Number of repetitions",
    )
    parser.add_argument(
        '-p', '--proc', dest="proc", 
        default=4, type=int, help="Number of processes",
    )
    parser.set_defaults(experiments=[], tests=[], command=main)

    args = parser.parse_args()

    if not hasattr(args, 'command'):
        parser.print_help()
    else:
        args.command(args)
